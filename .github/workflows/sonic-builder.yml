name: RSDKv5 Builder

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'RSDKv5'

jobs:
  build:
    runs-on: windows-latest
    
    env:
      SolutionPath: RSDKv5.sln
      Platform: x64
      Configuration: Release
      BuildMode: SideLoadOnly
      AppxBundle: Never      
      ProjectPath: RSDKv5/RSDKv5.UWP.vcxproj
      ProjectDirectory: .\RSDKv5
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: RSDKv5

    steps:            
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v2.0.0
        
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up environment
        run: |
          choco install make
          choco install msbuild

      - name: Download libogg
        run: |
          Invoke-WebRequest -Uri "https://downloads.xiph.org/releases/ogg/libogg-1.3.4.zip" -OutFile "libogg.zip"
          Expand-Archive -Path "libogg.zip" -DestinationPath "libogg"

      - name: Build libogg
        run: |
          cd libogg
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
        shell: powershell

      - name: Download libtheora
        run: |
          Invoke-WebRequest -Uri "https://downloads.xiph.org/releases/theora/libtheora-1.2.0alpha1.zip" -OutFile "libtheora.zip"
          Expand-Archive -Path "libtheora.zip" -DestinationPath "libtheora"

      - name: Build libtheora
        run: |
          msbuild "libtheora/win32/VS2010/libtheora_static.sln" /p:Configuration=Release
        shell: powershell

      - name: Download SDL2
        run: |
          Invoke-WebRequest -Uri "https://www.libsdl.org/release/SDL2-devel-2.0.14-VC.zip" -OutFile "SDL2.zip"
          Expand-Archive -Path "SDL2.zip" -DestinationPath "SDL2"

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: |
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV

      - name: App Build
        run: |
          msbuild $env:SolutionPath `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
            /p:AppxPackageTestDir="${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}" `
            /restore
        shell: pwsh

      - name: Clean the Package
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Cleaning package directory: $PackagePath"
            Remove-Item -Recurse -path "$PackagePath\Add-AppDevPackage.resources" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\TelemetryDependencies" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm64" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\x86" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\Win32" -ErrorAction SilentlyContinue
            Remove-Item -path "$PackagePath\Add-AppDevPackage.ps1" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Install.ps1" -ErrorAction SilentlyContinue
          } else {
            Write-Host "Package path does not exist: $PackagePath"
            exit 1
          }
        shell: pwsh
          
      - name: Create Archive
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip"
            Write-Host "Contents of package output directory after archiving:"
            Get-ChildItem -Path "${{ env.PackageOutputRootDir }}" -Recurse
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh
       
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ github.event.inputs.package_name }} Build
          path: ${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip