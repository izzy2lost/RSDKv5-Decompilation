name: Sonic Mania Builder

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'RSDKv5'

jobs:
  build:
    runs-on: windows-2022

    env:
      SolutionPath: RSDKv5.sln
      Platform: x64
      Configuration: Release
      BuildMode: SideLoadOnly
      AppxBundle: Never
      ProjectPath: RSDKv5\RSDKv5_dx11.vcxproj
      ProjectDirectory: .\RSDKv5
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: RSDKv5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Install wget
        run: choco install -y wget

      - name: Download SDL2.zip from Google Drive
        run: |
          wget -O SDL2.zip "https://drive.google.com/uc?export=download&id=1VhIYeCKl3o_gFCn-HwMOXTKBgh8ARLTo"
          New-Item -ItemType Directory -Force -Path "dependencies/windows/SDL2"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory('SDL2.zip', 'dependencies/windows/SDL2')
        shell: pwsh

      - name: Verify SDL2.lib extraction
        run: |
          Get-ChildItem -Path dependencies/windows/SDL2 -Recurse
        shell: pwsh

      - name: Retarget libogg to use v143 and Windows SDK 10.0.22621.0
        run: |
          cd dependencies/windows/libogg/win32/VS2015
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\devenv.exe" libogg.sln /Upgrade
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" libogg.sln /p:PlatformToolset=v143 /p:TargetPlatformVersion=10.0.22621.0 /p:WindowsTargetPlatformVersion=10.0.22621.0 /t:libogg /p:Configuration=Release
        shell: pwsh

      - name: Retarget libvorbis to use v143 and Windows SDK 10.0.22621.0
        run: |
          cd dependencies/windows/libvorbis/win32/VS2010
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\devenv.exe" vorbis_static.sln /Upgrade
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" vorbis_static.sln /p:PlatformToolset=v143 /p:TargetPlatformVersion=10.0.22621.0 /p:WindowsTargetPlatformVersion=10.0.22621.0 /t:libvorbis_static /p:Configuration=Release
        shell: pwsh
    
      - name: Retarget libtheora to use v143 and Windows SDK 10.0.22621.0
        run: |
          cd dependencies/windows/libtheora/win32/VS2010
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\devenv.exe" libtheora_static.sln /Upgrade
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" libtheora_static.sln /p:PlatformToolset=v143 /p:TargetPlatformVersion=10.0.22621.0 /p:WindowsTargetPlatformVersion=10.0.22621.0 /t:libtheora_static /p:Configuration=Release
        shell: pwsh

      - name: Download Game.dll from Google Drive
        run: |
          wget -O Game.dll "https://drive.google.com/uc?export=download&id=1SZ-T1hrD9mYmnVNq8kxThS2RU1gCm-Sb"
          New-Item -ItemType Directory -Force -Path "D:\a\RSDKv5-Decompilation\Sonic-Mania-Decompilation\build\x64\Release\Game"
          Move-Item -Path "Game.dll" -Destination "D:\a\RSDKv5-Decompilation\Sonic-Mania-Decompilation\build\x64\Release\Game\Game.dll"
        shell: pwsh      

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: |
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - name: App Build
        run: |
          msbuild $env:SolutionPath -target:RSDKv5-dx11 `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
            /p:AppxPackageTestDir="${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}" `
            /p:RestorePackagesConfig=true `
            /p:AdditionalLibraryDirectories="dependencies/windows/SDL2/lib" `
            /p:AdditionalDependencies="SDL2.lib" `
            /restore
        shell: pwsh
        
      - name: Clean the Package
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Cleaning package directory: $PackagePath"
            Remove-Item -Recurse -path "$PackagePath\Add-AppDevPackage.resources" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\TelemetryDependencies" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm64" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\x86" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\Win32" -ErrorAction SilentlyContinue
            Remove-Item -path "$PackagePath\Add-AppDevPackage.ps1" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Install.ps1" -ErrorAction SilentlyContinue
          } else {
            Write-Host "Package path does not exist: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Create Archive
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip"
            Write-Host "Contents of package output directory after archiving:"
            Get-ChildItem -Path "${{ env.PackageOutputRootDir }}" -Recurse
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ github.event.inputs.package_name }} Build
          path: ${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip
