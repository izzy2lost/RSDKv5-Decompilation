name: Sonic Mania Builder

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'RSDKv5'

jobs:
  build:
    runs-on: windows-2019

    env:
      SolutionPath: RSDKv5.sln
      Platform: x64
      Configuration: Release
      BuildMode: SideLoadOnly
      AppxBundle: Never
      ProjectPath: RSDKv5/RSDKv5.UWP.vcxproj
      ProjectDirectory: .\RSDKv5
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: RSDKv5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Install gdown
        run: pip install gdown

      - name: Download Visual Studio 2010 Express
        run: gdown --id 1ThQ_3sKIKvD28r8Tlc7ED4ycP7r_5AyV -O ${{ runner.temp }}/VS2010Express1.iso

      - name: Verify ISO file presence
        run: |
          $filePath = "${{ runner.temp }}\VS2010Express1.iso"
          if (Test-Path -Path $filePath) {
            Write-Host "ISO file exists at $filePath."
          } else {
            Write-Host "ISO file does not exist at $filePath."
            exit 1
          }
        shell: pwsh

      - name: List current directory contents
        run: dir ${{ runner.temp }}
        shell: pwsh

      - name: Mount ISO
        run: |
          $filePath = "${{ runner.temp }}\VS2010Express1.iso"
          $mountResult = Mount-DiskImage -ImagePath $filePath -PassThru
          if ($mountResult) {
            Write-Host "ISO mounted successfully."
            $driveLetter = ($mountResult | Get-Volume).DriveLetter
            Write-Host "Drive Letter: $driveLetter"
          } else {
            Write-Host "Failed to mount ISO."
            exit 1
          }
        shell: pwsh

      - name: Install Visual Studio 2010 Express
        run: |
          $driveLetter = (Get-DiskImage -ImagePath "${{ runner.temp }}\VS2010Express1.iso" | Get-Volume).DriveLetter
          $setupPath = "$($driveLetter):\VCExpress\setup.exe"
          if (Test-Path -Path $setupPath) {
            Write-Host "Starting Visual Studio 2010 Express installation from $setupPath."
            Start-Process -FilePath $setupPath -ArgumentList "/q" -Wait -NoNewWindow -PassThru
            $exitCode = $LastExitCode
            if ($exitCode -ne 0) {
              Write-Host "Visual Studio 2010 Express installation failed with exit code $exitCode"
              exit $exitCode
            } else {
              Write-Host "Visual Studio 2010 Express installed successfully"
            }
          } else {
            Write-Host "setup.exe not found in VCExpress folder."
            exit 1
          }
        shell: pwsh

      - name: Unmount ISO
        run: |
          Dismount-DiskImage -ImagePath "${{ runner.temp }}\VS2010Express1.iso"
        shell: pwsh

      - name: Build libogg
        run: |
          msbuild ./dependencies/windows/libogg/win32/VS2010/libogg_static.sln /p:Configuration=Release /p:Platform=x64 /p:PlatformToolset=v100
      - name: Build libtheora
        run: |
          msbuild ./dependencies/windows/libtheora/win32/VS2010/libtheora_static.sln /p:Configuration=Release /p:Platform=x64 /p:PlatformToolset=v100
      - name: Download GLEW
        run: |
          wget -O GLEW.zip "https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip"
          Expand-Archive -Path GLEW.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/glew-2.2.0 glew
          
      - name: Download SDL2
        run: |
          wget -O SDL2.zip "https://libsdl.org/release/SDL2-devel-2.28.5-VC.zip"
          Expand-Archive -Path SDL2.zip -DestinationPath ./dependencies/windows/
          Rename-Item ./dependencies/windows/SDL2-2.28.5 SDL2
          
      - name: Download Game.dll from Google Drive
        run: |
          wget -O Game.dll "https://drive.google.com/uc?export=download&id=1SZ-T1hrD9mYmnVNq8kxThS2RU1gCm-Sb"
          New-Item -ItemType Directory -Force -Path "D:\a\RSDKv5-Decompilation\Sonic-Mania-Decompilation\build\x64\Release\Game"
          Move-Item -Path "Game.dll" -Destination "D:\a\RSDKv5-Decompilation\Sonic-Mania-Decompilation\build\x64\Release\Game\Game.dll"
        shell: pwsh

      - name: Download ManiaTouchControls.dll from Google Drive
        run: |
          wget -O ManiaTouchControls.dll "https://drive.google.com/uc?export=download&id=1Sh-qQXAoYwEMKotbjSMRv7JmPuDVHIgp"
          New-Item -ItemType Directory -Force -Path "D:\a\RSDKv5-Decompilation\RSDKv5-Example-Mods\ManiaTouchControls\build\x64\Release"
          Move-Item -Path "ManiaTouchControls.dll" -Destination "D:\a\RSDKv5-Decompilation\RSDKv5-Example-Mods\ManiaTouchControls\build\x64\Release\ManiaTouchControls.dll"
        shell: pwsh

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: |
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
          
      - name: App Build
        run: |
          msbuild $env:SolutionPath -target:RSDKv5-UWP `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
            /p:AppxPackageTestDir="${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}" `
            /p:ForceImportBeforeCppTargets="$env:GITHUB_WORKSPACE/props/winactions_x64.props" `
            /p:RestorePackagesConfig=true `
            /restore
        shell: pwsh
